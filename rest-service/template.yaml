AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rest-service

  SAM Template for rest-service

Parameters:
  TableNamePosts:
    Type: String
    Default: "posts"
  TableNameArthurs:
    Type: String
    Default: "arthurs"
  Region:
    Type: String
    Default: "us-east-2"
  DYNAMODBURI:
    Type: String
    Default: "https://dynamodb.us-east-2.amazonaws.com"

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    CodeUri: handler/
    Runtime: nodejs20.x
    Architectures:
        - x86_64
    Environment:
      Variables:
        TABLE_NAME_POSTS: !Ref TableNamePosts
        TABLE_NAME_ARTHURS: !Ref TableNameArthurs
        DYNAMODB_URI: !Ref DYNAMODBURI
        REGION_NAME: !Ref Region

Resources:

  PostRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Models:
        postModelPostPutRequest:
          type: object
          required:
            - arthurId
            - title
            - message
          properties:
              arthurId:
                type: string
              title:
                type: string
              message:
                type: string
        arthurModelPostPutRequest:
            type: object
            required:
              - name
            properties:
                name:
                  type: string

  # POST ROUTES #

  GetAllPosts:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: posts/index.getAllPosts
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableNamePosts
        - DynamoDBReadPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        GetAllPostsEvent:
          Type: Api 
          Properties:
            RestApiId: !Ref PostRestApi
            Path: /posts
            Method: get
            
  GetPostById:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: posts/index.getPostById
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableNamePosts
        - DynamoDBReadPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        GetPostByIdEvent:
          Type: Api 
          Properties:
            Path: /posts/{id}
            Method: get
            RestApiId: !Ref PostRestApi

  CreatePost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: posts/index.createPost
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNamePosts
        - DynamoDBReadPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        CreatePostEvent:
          Type: Api 
          Properties:
            RestApiId: !Ref PostRestApi
            Path: /posts
            Method: post

            RequestModel:
              Model: postModelPostPutRequest
              Required: true
              ValidateBody: true

  EditPost:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: posts/index.editPost
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNamePosts
      Events:
        EditPostEvent:
          Type: Api 
          Properties:
            RestApiId: !Ref PostRestApi
            Path: /posts/{id}
            Method: put

            # Will not work when running sam local start-api
            RequestModel:
              Model: postModelPostPutRequest
              Required: true
              ValidateBody: true

  DeletePost:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: posts/index.deletePost
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNamePosts
      Events:
        DeletePostEvent:
          Type: Api 
          Properties:
            RestApiId: !Ref PostRestApi
            Path: /posts/{id}
            Method: delete

  # Arthur Routes #
  
  GetPostsByArthur:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: arthurs/index.getPostsByArthur
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableNamePosts
      Events:
        GetPostsByArthurEvent:
          Type: Api 
          Properties:
            Path: /arthurs/{id}/posts
            Method: get
            RestApiId: !Ref PostRestApi

  GetArthurs:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: arthurs/index.getArthurs
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        GetArthursEvent:
          Type: Api 
          Properties:
            Path: /arthurs
            Method: get
            RestApiId: !Ref PostRestApi

  GetArthurById:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: arthurs/index.getArthurById
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        GetArthurByIdEvent:
          Type: Api 
          Properties:
            Path: /arthurs/{id}
            Method: get
            RestApiId: !Ref PostRestApi

  CreateArthur:
    Type: AWS::Serverless::Function
    Properties:
      Handler: arthurs/index.createArthur
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameArthurs
      Events:
        CreateArthurEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PostRestApi
            Path: /arthurs
            Method: post

            RequestModel:
              Model: arthurModelPostPutRequest
              Required: true
              ValidateBody: true

  PostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableNamePosts
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:  
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ArthurTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableNameArthurs
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:  
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetAllPosts:
    Description: "API Gateway endpoint URL for the GetAllPosts function"
    Value: !Sub "https://${PostRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/posts"

